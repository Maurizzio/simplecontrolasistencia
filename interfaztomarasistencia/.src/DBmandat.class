' Gambas class file

'' clase de manejo de datos entre fuentes de datos (data sources class module management)
'' 
'' esta clase, abstrae y engloba funciones de inicio y preparacin de fuentes de datos (bases de datos)
'' sus principales tareas son :
'' a) ofrecer una coneccion a la DB local (sqlite3) si no existe, la cra y inicia sus tablas
'' b) proveer de metodos de inicializacion (procesos sysasis_<tablas>) que crean sus estructuras de tablas
'' c) proveer funciones de registro de asistencia
'' d) permitir metodos de sincronizacion de los datos en nodos de origen si existen algunos
'' e) verificar y mantener la integridad del mo0dulo en todo momento
'' 
'' notese que la verificacion de integridad solo se realiza en los procesos de inicializacion
'' 

Private hconn As Connection     ' objeto de la coneccion de base de datos local (registros o enrolamientos)
Private pconn As Connection     ' objeto de la coneccion de base de datos remota (sincoronizacion o replicaicon)
Private hconnpath As String     ' ruta de la base de datos local
Private hconndbnam As String    ' nombre de la base de datos local
Private hconniscon As Boolean   ' estado de el modulo, TRUE si la conecion esta viva y puede usarse


'' modulo de apertura y conexcion a la db para guardar las imagenes escaneadas
Public Sub getConeccionDB() As Connection

    'hconnpath = Application.Path & "/dbdata/asistenciatomar.sqlite"
    hconndbnam = ".scanerguidb.db"
    hconniscon = False

    hconn = New Connection 'Instanciamos conexion
    With hconn
        .Type = "sqlite3"
        .Host = User.Home   ' usando el home de quien corre la app para buscar alli la DB
        .Name = hconndbnam          ' no decimos aun el nombre/archivo de la db, la creamos si no existe
    End With

    Try hconn.Open
    If Error Then

        Print "Error: " & Error.Code & " " & Error.Text & " db was " & hconn.Host & " trying to create"

        hconn.Close
        hconn.Name = ""          ' no decimos aun el nombre/archivo de la db, la creamos si no existe
        hconn.Open

        If Not hconn.Databases.Exist(hconndbnam) Then  'Si no existe la B.D. la creamos
            hconn.Databases.Add(hconndbnam)
            Wait 1              'elproceso de creacion tarda (operacion I/O) asi que esperamos ocurra
            hconn.Close
            hconn.Name = hconndbnam
        Endif

        Try hconn.Open
        If Error Then
            Print "Error, no pudo crearse la DB en " & hconn.Name & " no mas acciones para solucionar"
            hconn = Null
            hconn.Close
            hconniscon = False
        Endif
    Else
        Print "Conexcion realizada, usando la DB " & hconn.Name & " existente"
        hconniscon = True
    Endif

Return hconn

End


'' este, inicia estructura de datos para poder listar las huellas dactilares
Public Function sysasis_init_listado_huella()

    ' Create TABLE sysasis_listado_huella(
    '   cod_ficha VARCHAR(20) Not Null, - - ficha / cedula / id del trabajador NOTA ESTE NO ES CI SINO numero, en VNZ es CI
    '   fec_registro Date Not Null, - - fecha del registro de dia de su huella dactilar
    '   cod_ubicacion VARCHAR(20) Not Null, - - ubicacion(tienda)de su ultima actividad, es CODSUC/CODGER
    '   hex_huelladactilar BLOB Not Null, - - huella dactilar tomada, es HEXFING
    '   fec_actualizacion Date Null, - - fecha en que se altero los datos de esta tabla por ultima vez
    '   cod_usuasys VARCHAR(20)Null, - - codigo / usuario que altero los datos por ultima vez
    '   PRIMARY KEY(cod_ficha, fec_registro, cod_ubicacion, hex_huelladactilar),

    ' Tabla de la ficha de registro de sysasis_enrolamiento_huella

    Dim hTable As Table

    If isConected() == False Then
        getConeccionDB()
    Endif
    
    If hconniscon Then
    If Not hconn.Tables.Exist("sysasis_listado_huella") Then
        hTable = hconn.Tables.Add("sysasis_listado_huella")
        With hTable.Fields
            .Add("id", db.Serial) ' para unicidad
            .Add("cod_ficha", db.String, 20)   ' FICHA/Cedu,  el id del trabajador NOTA ESTE NO ES CI, en VNZ es CI
            .Add("fec_registro", db.Date,, Now)   ' fecha del registro de dia de su huella dactilar
            .Add("cod_ubicacion", db.String, 20)   ' ubicacion(tienda)de su ultima actividad, es CODSUC/CODGER
            .Add("hex_huelladactilar", db.Blob,, Null)  ' huella dactilar del usuario/trabajado ficha, es HEXFING
            .Add("fec_actualizacion", db.Date,, Now)   ' fecha del registro de dia de su huella dactilar
            .Add("cod_usuasys", db.String, 20)   ' ficha / cedula / id del trabajador NOTA ESTE NO ES CI, en VNZ es CI
        End With
        hTable.PrimaryKey = ["id"] ' no es necesario , es solo lectura
        hTable.Update
    Endif
    Else
    Message.Error("")
    Endif

End


'' proceso de inicializacion de DB, tabla de enrolamiento, si no existe en la DB una tabla de enrolamiento, se crea.
'' este, inicia estructura de datos para poder enrolar nuevas huellas dactilares
Public Function sysasis_init_enrolamiento_huella()

    ' Create TABLE sysasis_enrolamiento_huella(
    '   cod_ficha VARCHAR(20) Not Null, - - FICHA/Cedu, el id del trabajador NOTA ESTE NO ES CI, en VNZ es CI
    '   fec_registro Date Not Null, - - fecha del registro de dia de su huella dactilar
    '   cod_ubicacion VARCHAR(20) Not Null, - - ubicacion(tienda)de su ultima actividad, es CODSUC/CODGER
    '   hex_huelladactilar BLOB Not Null, - - huella dactilar tomada es HEXFING
    '   fec_actualizacion Date Null, - - fecha en que se altero los datos de esta tabla por ultima vez
    '   cod_usuasys VARCHAR(20)Null, - - codigo / usuario que altero los datos por ultima vez
    '   PRIMARY KEY(cod_ficha, fec_registro, cod_ubicacion, hex_huelladactilar),

    ' Tabla de la ficha de registro de sysasis_enrolamiento_huella

    Dim hTable As Table

    If isConected() == False Then
        getConeccionDB()
    Endif
    
    If Not hconn.Tables.Exist("sysasis_enrolamiento_huella") Then
        hTable = hconn.Tables.Add("sysasis_enrolamiento_huella")
        With hTable.Fields
            .Add("cod_ficha", db.String, 20)   ' FICHA/Cedu, el id del trabajador en VNZ es numero de la CI
            .Add("fec_registro", db.Date,, Now)   ' fecha del registro de dia de su huella dactilar
            .Add("cod_ubicacion", db.String, 20)   ' ubicacion(tienda)de su ultima actividad, es CODSUC/CODGER
            .Add("hex_huelladactilar", db.Blob,, Null)  ' huella dactilar del usuario/trabajado ficha, HEXFING
            .Add("fec_actualizacion", db.Date,, Now)   ' fecha del registro de dia de su huella dactilar
            .Add("cod_usuasys", db.String, 20)   ' ficha / cedula / id del trabajador NOTA ESTE NO ES CI, en VNZ es CI
        End With
        hTable.PrimaryKey = ["cod_ficha", "cod_ubicacion", "fec_registro"]
        hTable.Update
    Endif

End


'' inicializacion de registros en la DB, si no existe en DB la tabla de registros la crea
Public Function sysasis_registro()

    ' - - tabla de registros del horario de trabajo, es usada para enviar a OP y registrar los horarios laborados
    ' Create TABLE sysasis_registro(
    '   cod_ficha VARCHAR(20) Not Null, - - ficha / cedula / id del trabajador NOTA ESTE NO ES CI, en VNZ es CI
    '   cod_cedula VARCHAR(20) Not Null, - - cedula con nacionalidad y guin del trabajador, solo VNZ
    '   fec_registro Date Not Null, - - fecha del registro de dia a laborar
    '   cod_ubicacion VARCHAR(20) Not Null, - - ubicacion(tienda)de su ultima actividad
    '   num_contador INTEGER Not Null Default 0, - - contador de fotos, si va a distintos lugares debe marcar salida
    '   horaentrada INTEGER Null, - - hora de entrada del dia
    '   minuentrada INTEGER Null, - - minuto de entrada en dicha hora
    '   horadescanso INTEGER Null, - - hora de descanso del dia
    '   minudescanso INTEGER Null, - - minuto de descanso en dicha respectiva hora
    '   horareincor INTEGER Null, - - hora que se reincorpora del descanso
    '   minureincor INTEGER Null, - - minuto de reincorporacion de dicha hora
    '   horasalida INTEGER Null, - - hora de salida del dia laborado
    '   minusalida INTEGER Null, - - minuto de salida de dich hora
    '   fec_actualizacion Date Null, - - fecha en que se altero los datos de esta tabla por ultima vez NOTA FUNCIONA CON DEFAULT NOW
    '   cod_usuasys VARCHAR(20)Null, - - codigo / usuario que altero los datos por ultima vez
    '   PRIMARY KEY(cod_ficha, fec_registro, cod_ubicacion),
    '   - - si el personal es muy movido, tendra registros en distintas ubicaciones,
    '   - - el ubicacion ayuda a descartar duplicados.esto amerita tener un SP que maneje los datos
    '   - - la expotacio se realizara en un vista que colocara el calculo de las horas y
    '   - - estos registros "dispersos"(ejemplo, entro en castellana, su primera salida debe ser de castellana antes de ir a otro lado)
    '   - - diferencia entre registro no puede ser menor a 1 / 3 hora y mayor a 6 horas CUANDO SEAN SELLOS DISTINTOS

    ' Poruqe dos columnas de fecha? : porque la segunda es por defecto la fecha y hora actual, si alguien manipula, se registra
    ' lo que significa que si alguien inserta alguna hora de trabajo a mano, se vera la trampa si no ejecuta completo el query

    Dim hTable As Table

    If isConected() == False Then
        getConeccionDB()
    Endif
    
    If Not hconn.Tables.Exist("sysasis_registro_huella") Then
        hTable = hconn.Tables.Add("sysasis_registro_huella")
        With hTable.Fields
            .Add("cod_ficha", db.String, 20)   ' ficha / cedula / id del trabajador NOTA ESTE NO ES CI, en VNZ es CI
            .Add("fec_registro", db.Date,, Null)   ' fecha del registro de dia de su huella dactilar
            .Add("cod_ubicacion", db.String, 20)   ' ubicacion(tienda)de su ultima actividad es CODSUC/CODGER
            .Add("num_contador", db.Integer,, 0)      ' contador de fotos, si va a distintos lugares debe marcar salida = 4
            .Add("horaentrada", db.Integer,, 0)      '
            .Add("minuentrada", db.Integer,, 0)      '
            .Add("horadescanso", db.Integer,, 0)      '
            .Add("minudescanso", db.Integer,, 0)      '
            .Add("minureincor", db.Integer,, 0)      '
            .Add("horasalida", db.Integer,, 0)      '
            .Add("minusalida", db.Integer,, 0)      '
            .Add("hex_huelladactilar", db.Blob,, Null)  ' huella dactilar del usuario/trabajado ficha, opcional, es HEXFING
            .Add("fec_actualizacion", db.Date,, Now)   ' fecha del registro de dia de su huella dactilar
            .Add("cod_usuasys", db.String, 20)   ' ficha / cedula / id del trabajador NOTA ESTE NO ES CI, en VNZ es CI
        End With
        hTable.PrimaryKey = ["cod_ficha", "cod_ubicacion", "fec_registro"]
        hTable.Update
    Endif

End



'' este proceso, inicia la tabla de lista de trabajadores/usuarios, y la pobla desde un archivo CSV o desde un regiastro por defecto
'' este proceso obtiene la lista de empleados/usuarios a autenticar, completa (fuerza bruta)
'' retrae el fichero compreso/encriptado, detecta nombres de campos e inserta los registros
'' una vez realizado esto borra el fichero desencriptado, los archivos son movidos por fecha
'' la fecha es el numero, no importando la de la maquina, la ultima fecha sera siempre el numero mayor
Public Sub syncronizar() As Integer

    Dim namFile As String   ' nombre del archivo CVS que trae la lista actualizada
    Dim namComp As New Uncompress   ' archivo comprimido
    Dim hFile As File       ' archivo CSV que se leera con los datos
    Dim wtable As Result    ' virtualizacion en tabal del archivo CSV antes de meter en la tabal de BD
    Dim wline As String     ' linea en procesamiento del CSV
    Dim wdata As String[]   ' linea procesada (columnas) del CSV
    Dim hTable As Table     ' tabla de la nomina listado desde esas lineas de procesamiento
    Dim numDate As Integer  ' numero formado por YYYYMMDD este se ira reduciendo hasta encontrar un archivo
    Dim extFile As String       ' extension del archivo dependiendo si esta compreso

    Dim TIPNOM As Integer = 0, CODSUC As Integer = 1, CODGER As Integer = 2
    Dim FICHA As Integer = 3, NOMBRES As Integer = 4, APELLIDOS As Integer = 5, ESTADO As Integer = 6
    Dim Cedula As Integer = 7, Cedu As Integer = 8, HEXFING As Integer = 9

    Dim dummycont As Integer, icols As Integer, iline As Integer
    Dim dummyword As String     ' usado para ir analizando cada celada del archivo csv
    Dim dummyquer As String     ' usado para efectuar querys
    Dim fileexits As Boolean = False

    
    ' preparacion de la coneccion de base de datos
    If isConected() == False Then
        getConeccionDB()
    Endif
    
    If FMain.datos.itsListaCompresa() Then
        extFile = ".csv.cryte"
    Else
        extFile = ".csv"
    Endif

    ' inicializacion de la lista matutina, esta lista solo se debe actualizar si hay archivo nuevo.
    numDate = Val(Format$(Now, "yyyymmdd"))
    namFile = User.Home &/ FMain.datos.getArchivoConsolidado() & extFile

    ' verificacion de si hay actualizacion de la lista de empleados, sino no procedo a usar alguno antiguo
    If Not Exist(namFile) Then
        fileexits = False
        While fileexits == False
          numDate = numDate - 1
          namFile = User.Home &/ FMain.datos.getArchivoConsoNombreBase() & numDate & extFile
          If Exist(namFile) Then
              Print "encontrado archivo viejo " & namFile
              fileexits = True
          Endif
          If numDate = 20121231 Then
              Message.Error("No se encontro datos de sincronizacion al dia, consulte a sistemas. \n" 
              "\n\nNo se puede tomar asistencia\n\n"
              "Debe existir un archivo similar a " & namFile & " como minimo.")
              Return -1
          Endif
        Wend
    Else
        fileexits = True ' si el archivo existe a la primera la lista esta al dia
    Endif
    
    If FMain.datos.itsListaCompresa() Then
        extFile = ".cvs"
        namComp.Type = "bzlib2"
        namComp.File(namFile, User.Home &/ FMain.datos.getArchivoConsoNombreBase() & numDate & extFile)
        namFile = User.Home &/ FMain.datos.getArchivoConsoNombreBase() & numDate & extFile
    Endif
        
    If fileexits Then
        
        'hay archivos nuevos, hay gente nueva, por ende se borra la tabla y se crea nueva
        hconn.Begin
            Try hconn.Tables.Remove("ConsolidadoTemp")
            If Not hconn.Tables.Exist("ConsolidadoTemp") Then
                hTable = hconn.Tables.Add("ConsolidadoTemp")
                With hTable.Fields
                    .Add("TIPNOM", db.String, 60, "999") ' TIPONOM VARCHAR(60) Default Null, - - PK: nunca hay dos trabajadores en la misma nomina
                    .Add("CODSUC", db.String, 60, "999") ' CODSUC VARCHAR(60) Default Null, - - brinda info del lugar de trabajo
                    .Add("CODGER", db.String, 60, "999") ' CODGER VARCHAR(60) Default Null, - - brinda info del lugar donde debe trabajar
                    .Add("FICHA", db.String, 60, "99999999") ' FICHA VARCHAR(10)Null Default Null, - - identificador o licencia conducir, cedula sin letra de nacionalidad en caso Venezuela
                    .Add("NOMBRES", db.String, 60, Null) ' NOMBRES VARCHAR(60)Null Default Null, - - nombre, ambos separados por un espacio
                    .Add("APELLIDOS", db.String, 60, Null) ' APELLIDOS VARCHAR(60)Null Default Null, - - apellido, ambos separados por un espacio
                    .Add("ESTADO", db.String, 60, Null) ' ESTADO VARCHAR(60)Null Default Null, - - activo, inactivo, suspendido, vacaciones, usado para verificacion y auditoria
                    .Add("Cedula", db.String, 60, "99999999") ' Cedu VARCHAR(12)Null Default Null, - - numero de la cedula es unico y no debe estar repetido
                    .Add("HEXFING", db.Blob,, Null) ' HEXFING64 -- la huella dactilar, viene base64 codificado y debe convertirse antes de colocarse
                    .Add("fec_actualizacion", db.String, 60, Now) ' fec_actualizacion Date Not Null, - - fecha en que se altero los datos de esta tabla por ultima vez
                    .Add("cod_usuario", db.String, 60, "systemas") ' cod_usuario VARCHAR(20)Null Default 'systemas' , -- codigo/usuario que altero los datos por ultima vez
                End With
                hTable.PrimaryKey = ["TIPNOM", "CODSUC", "CODGER", "FICHA", "Cedula"] ' cedula no es pk, debe ser cedu
                hTable.Update
            Endif
            
        hconn.Commit
            
            ' procesamiento del archivo CSV, en un futuro este deberia solo enviar los cambiios
            hFile = Open namFile For Read
            ' primero leemos solo la primera linea, para determinar si hay nombres de columnas
            dummycont = 0
            Seek #hFile, dummycont
                Line Input #hFile, wline
                wdata = Split(wline, ",")
                ' recorro para ver si hay cabeceras, sino se usan las por defecto
                For icols = 0 To wdata.Max
                    ' tomo la celda actual en icols
                    dummyword = celdalimpia(wdata[icols])
                    ' analizo si la celda contiene comillas simples
                    ' empiezo comparar la linea primera por nombres de columnas
                    If Comp(dummyword, "TIPNOM", 1) = 0 Then
                        TIPNOM = icols
                    Endif
                    If Comp(dummyword, "CODSUC", 1) = 0 Then
                        CODSUC = icols
                    Endif
                    If Comp(dummyword, "CODGER", 1) = 0 Then
                        CODGER = icols
                    Endif
                    If Comp(dummyword, "FICHA", gb.IgnoreCase) == 0 Then
                        FICHA = icols
                    Endif
                    If Comp(dummyword, "NOMBRES", 1) = 0 Then
                        NOMBRES = icols
                    Endif
                    If Comp(dummyword, "APELLIDOS", 1) = 0 Then
                        APELLIDOS = icols
                    Endif
                    If Comp(dummyword, "ESTADO", 1) = 0 Then
                        ESTADO = icols
                    Endif
                    If Comp(dummyword, "Cedula", 1) = 0 Then
                        Cedula = icols
                    Endif
                    If Comp(dummyword, "Cedu", 1) == 0 Then
                        Cedu = icols
                    Endif
                    If Comp(dummyword, "HEXFING64", 1) == 0 Then
                        HEXFING = icols
                    Else
                        HEXFING = wdata.Max
                    Endif
                Next
                dummycont = dummycont + 1
            'Endif
            ' leyendola primera columna, leemos el resto
        hconn.Begin
            
            While Not Eof(hFile)
                Line Input #hFile, wline
                If InStr(wline, ",") > 1 Then
                wdata = Split(wline, ",", "\\", False)
                Else
                wdata = Split(wline, ";", "\\", False)
                Endif
                'Print "procesando archivo linea " & dummycont & ": " & wdata[TIPNOM] & "," & wdata[CODSUC] & "," & wdata[CODGER] & "," & wdata[FICHA] & "," & wdata[Cedula] & "," & wdata[Cedu] & "," & wdata[Modalidad]
                wtable = hconn.Create("ConsolidadoTemp")
                wtable["TIPNOM"] = celdalimpia(wdata[TIPNOM]) ' TIPNOM VARCHAR(60) Default Null, - - PK necesaria, dado no hay un trab en varias nominas
                wtable["CODSUC"] = celdalimpia(wdata[CODSUC]) ' CODSUC VARCHAR(60) Default Null, - - brinda info del lugar de trabajo
                wtable["CODGER"] = celdalimpia(wdata[CODGER]) ' CODGER VARCHAR(60) Default Null, - - brinda info del lugar donde debe trabajar
                wtable["FICHA"] = celdalimpia(wdata[FICHA]) ' FICHA VARCHAR(10)Null Default Null, - - identificador o licencia conducir, cedula sin letra de nacionalidad en caso Venezuela
                wtable["NOMBRES"] = celdalimpia(wdata[NOMBRES]) ' NOMBRES VARCHAR(60)Null Default Null, - - nombre, ambos separados por un espacio
                wtable["APELLIDOS"] = celdalimpia(wdata[APELLIDOS]) ' APELLIDOS VARCHAR(60)Null Default Null, - - apellido, ambos separados por un espacio
                wtable["ESTADO"] = celdalimpia(wdata[ESTADO]) ' ESTADO VARCHAR(60)Null Default Null, - - activo, inactivo, suspendido, vacaciones, usado para verificacion y auditoria
                'wtable["Cedula"] = celdalimpia(wdata[Cedula]) ' Cedula VARCHAR(12)Null Default Null, - - cedula con el simbolo de nacionalidad separado popr guion, solo Venezuela
                wtable["Cedula"] = celdalimpia(wdata[Cedu]) ' Cedu VARCHAR(12)Null Default Null, - - numero unico del trabajador, en venezuela la cedula
                'wtable["HEXFING64"] = wdata[HEXFING64] ' HEXFING64 -- la huella dactilar, viene base64 codificado y debe convertirse antes de colocarse
                wtable.Update
                dummycont = dummycont + 1
            Wend
            Print "Procesados " & dummycont & " registros, lista completa"
            hFile.Close
            
        hconn.Commit
        FMain.datos.setDbLocalLista(True) ' comunico a main que ya no tiene que invocarme mas nunca
        Try Kill namFile
    Endif
    
    sysasis_init_listado_huella
    sysasis_init_enrolamiento_huella
    sysasis_registro
    
    hconn.Close
    dummyquer = "INSERT" 
    dummyquer = " INTO sysasis_listado_huella(cod_ficha, fec_registro, cod_ubicacion, hex_huelladactilar)" 
    dummyquer = " Select ficha, fec_actualizacion, codsuc, HEXFING From consolidadotemp "
    
    ' TODO pasar la data con los dedos a la tabla de listado
    ' 
    Return 0

End

'' celdalimpia remueve la comillas simples/dobles de una variable texto
Private Sub celdalimpia(celda As String, Optional delimitador As String = "\"") As String
    If Left$(celda) == "\'" And Right$(celda) == "\'" Then
        celda = Mid$(celda, 2, -1)
    Endif
    ' analizo si la celda contiene comillas dobles
    If Left$(celda) == delimitador And Right$(celda) == delimitador Then
        celda = Mid$(celda, 2, -1)
    Endif
    Return celda
End

                    
'' empleada para verificar el correcto seguimiento de inicio de la gestin de datos, con true, cada proceso extra no fallaria
'' verificador de coneccion activa, getconnection establece True y crea una nueva si es necesario
Public Sub isConected() As Integer
    Return hconniscon ' getconection establece esto a true si hay una coneccion activa
End
