' Gambas class file

'' clase de manejo de datos entre fuentes de datos (data sources class module management)
'' 
'' esta clase, abstrae y engloba funciones de inicio y preparacin de fuentes de datos (bases de datos)
'' sus principales tareas son :
'' a) ofrecer una coneccion a la DB local (sqlite3) si no existe, la cra y inicia sus tablas
'' b) proveer de metodos de inicializacion (procesos sysasis_<tablas>) que crean sus estructuras de tablas
'' c) proveer funciones de registro de asistencia
'' d) permitir metodos de sincronizacion de los datos en nodos de origen si existen algunos
'' e) verificar y mantener la integridad del mo0dulo en todo momento
'' 
'' notese que la verificacion de integridad solo se realiza en los procesos de inicializacion
'' 

Private hconn As Connection     ' objeto de la coneccion de base de datos local (registros o enrolamientos)
Private pconn As Connection     ' objeto de la coneccion de base de datos remota (sincoronizacion o replicaicon)
Private hconnpath As String     ' ruta de la base de datos local
Private hconndbnam As String    ' nombre de la base de datos local
Private hconniscon As Boolean   ' estado de el modulo, TRUE si la conecion esta viva y puede usarse
Private dbexistealdia As Boolean ' si la db existe no es necesario sincronizar


'' modulo de apertura y conexcion a la db para guardar las imagenes escaneadas
Public Sub getConeccionDB() As Connection

    hconn = Null
    'hconnpath = Application.Path & "/dbdata/asistenciatomar.sqlite"
    hconndbnam = ".scanerguidb" & Val(Format$(Now, "yyyymmdd")) & ".db"
    hconniscon = False

    hconn = New Connection 'Instanciamos conexion
    With hconn
        .Type = "sqlite3"
        .Host = User.Home   ' usando el home de quien corre la app para buscar alli la DB
        .Name = hconndbnam          ' no decimos aun el nombre/archivo de la db, la creamos si no existe
    End With

    Try hconn.Open
    If Error Then
        

        Print "Error al conectar: \"" & Error.Code & " " & Error.Text & "\"; actualizando a una al dia...."
        dbexistealdia = False

        hconn.Close
        hconn.Name = ""          ' no decimos aun el nombre/archivo de la db, la creamos si no existe
        hconn.Open
        Wait 5                  ' dejamos espacio a la operacion I/O si se arranco a cambio de dia justico

        If Not hconn.Databases.Exist(hconndbnam) Then  'Si no existe la B.D. la creamos
            hconn.Databases.Add(hconndbnam)
            Wait 1              'elproceso de creacion tarda (operacion I/O) asi que esperamos ocurra
            hconn.Close
            hconn.Name = hconndbnam
        Endif

        Try hconn.Open
        If Error Then
            Print "Error, la DB " & hconn.Name & " no se pudo crear/usar, no mas acciones para solucionar"
            hconn = Null
            hconn.Close
            hconniscon = False
        Else
            hconniscon = True
        Endif
    Else
        hconniscon = True
        dbexistealdia = True    ' si conecta a la primera, la DB existe y ya esta sincronizada
    Endif
    
    If hconniscon Then
         Print "Conexion realizada, usando la DB " & hconn.Name & " existente/creada, no es necesario sincronizar"
    Else
        Return hconniscon
    Endif

Return hconn

End

'' cierra coneccion alguna si aun esta abierta
Public Function closeConnection()
    If isConected() == True Then
        hconn.Close
    Endif
End

'' informa si la db ya existe, lo que significa que ya este sincronizada y con datos listos para usar, ya uqe getconnection y sincronizar la inician slo si es creada
Public Function itsDBexiste() As Boolean
    Return dbexistealdia
End

'' este, inicia estructura de datos para poder listar las huellas dactilares
Public Function sysasis_init_listado_id()

    ' Create TABLE sysasis_listado_id(
    '   cod_ficha VARCHAR(20) Not Null, - - ficha / cedula / id del trabajador NOTA ESTE NO ES CI SINO numero, en VNZ es CI
    '   fec_registro Date Not Null, - - fecha del registro de dia de su huella dactilar
    '   cod_ubicacion VARCHAR(20) Not Null, - - ubicacion(tienda)de su ultima actividad, es CODSUC/CODGER
    '   hex_huelladactilar BLOB Not Null, - - huella dactilar tomada, es HEXFING
    '   hex_fotocara BLOB Not Null, - -foto de la cara es OPCIONAL y no necesario
    '   fec_actualizacion Date Null, - - fecha en que se altero los datos de esta tabla por ultima vez
    '   cod_usuasys VARCHAR(20)Null, - - codigo / usuario que altero los datos por ultima vez
    '   PRIMARY KEY(cod_ficha, fec_registro, cod_ubicacion, hex_huelladactilar),

    ' Tabla de la ficha de registro de sysasis_listado_id

    Dim hTable As Table

    If isConected() == False Then
        getConeccionDB()
    Endif
    
    If hconniscon Then
    If Not hconn.Tables.Exist("sysasis_listado_id") Then
        hTable = hconn.Tables.Add("sysasis_listado_id")
        With hTable.Fields
            '.Add("id", db.Serial) ' para unicidad
            .Add("cod_ficha", db.String, 20)   ' FICHA/Cedu,  el id del trabajador NOTA ESTE NO ES CI, en VNZ es CI
            .Add("fec_registro", db.Date,, Now)   ' fecha del registro de dia de su huella dactilar
            .Add("cod_ubicacion", db.String, 20)   ' ubicacion(tienda)de su ultima actividad, es CODSUC/CODGER
            .Add("hex_huelladactilar", db.Blob,, Null)  ' huella dactilar del usuario/trabajado ficha, es HEXFING
            .Add("hex_fotocara", db.Blob,, Null)  ' fot de la cara del usuario/trabajado ficha, OPCIONAL
            .Add("fec_actualizacion", db.Date,, Now)   ' fecha del registro de dia de su huella dactilar
            .Add("cod_usuasys", db.String, 20)   ' ficha / cedula / id del trabajador NOTA ESTE NO ES CI, en VNZ es CI
        End With
        hTable.PrimaryKey = ["cod_ficha", "fec_registro", "cod_ubicacion"] ' no es necesario , es solo lectura
        hTable.Update
    Endif
    Else
    Message.Error(" error " & Error.Code & " " & Error.Text)
    Endif
    closeConnection

End


'' proceso de inicializacion de DB, tabla de enrolamiento, si no existe en la DB una tabla de enrolamiento, se crea.
'' este, inicia estructura de datos para poder enrolar nuevas huellas dactilares
Public Function sysasis_init_enrolar_id()

    ' Create TABLE sysasis_enrolar_id(
    '   cod_ficha VARCHAR(20) Not Null, - - FICHA/Cedu, el id del trabajador NOTA ESTE NO ES CI, en VNZ es CI
    '   fec_registro Date Not Null, - - fecha del registro de dia de su huella dactilar
    '   cod_ubicacion VARCHAR(20) Not Null, - - ubicacion(tienda)de su ultima actividad, es CODSUC/CODGER
    '   hex_huelladactilar BLOB Not Null, - - huella dactilar tomada es HEXFING
    '   hex_fotocara BLOB Not Null, - -foto de la cara es OPCIONAL y no necesario
    '   fec_actualizacion Date Null, - - fecha en que se altero los datos de esta tabla por ultima vez
    '   cod_usuasys VARCHAR(20)Null, - - codigo / usuario que altero los datos por ultima vez
    '   PRIMARY KEY(cod_ficha, fec_registro, cod_ubicacion, hex_huelladactilar),

    ' Tabla de la ficha de registro de sysasis_enrolar_id

    Dim hTable As Table

    If isConected() == False Then
        getConeccionDB()
    Endif
    
    If Not hconn.Tables.Exist("sysasis_enrolar_id") Then
        hTable = hconn.Tables.Add("sysasis_enrolar_id")
        With hTable.Fields
            .Add("cod_ficha", db.String, 20)   ' FICHA/Cedu, el id del trabajador en VNZ es numero de la CI
            .Add("fec_registro", db.Date,, Now)   ' fecha del registro de dia de su huella dactilar
            .Add("cod_ubicacion", db.String, 20)   ' ubicacion(tienda)de su ultima actividad, es CODSUC/CODGER
            .Add("hex_huelladactilar", db.Blob,, Null)  ' huella dactilar del usuario/trabajado ficha, HEXFING
            .Add("hex_fotocara", db.Blob,, Null)  ' foto de la cara del usuario/trabajado ficha, OPCIONAL
            .Add("fec_actualizacion", db.Date,, Now)   ' fecha del registro de dia de su huella dactilar
            .Add("cod_usuasys", db.String, 20)   ' ficha / cedula / id del trabajador NOTA ESTE NO ES CI, en VNZ es CI
        End With
        hTable.PrimaryKey = ["cod_ficha", "cod_ubicacion", "fec_registro"]
        hTable.Update
    Endif
    closeConnection

End


'' inicializacion de registros en la DB, si no existe en DB la tabla de registros la crea
Public Function sysasis_init_registro()

    ' - - tabla de registros del horario de trabajo, es usada para enviar a OP y registrar los horarios laborados
    ' Create TABLE sysasis_registro(
    '   cod_ficha VARCHAR(20) Not Null, - - ficha / cedula / id del trabajador NOTA ESTE NO ES CI, en VNZ es CI
    '   cod_cedula VARCHAR(20) Not Null, - - cedula con nacionalidad y guin del trabajador, solo VNZ
    '   fec_registro Date Not Null, - - fecha del registro de dia a laborar
    '   cod_ubicacion VARCHAR(20) Not Null, - - ubicacion(tienda)de su ultima actividad
    '   num_contador INTEGER Not Null Default 0, - - contador de fotos, si va a distintos lugares debe marcar salida
    '   horaentrada INTEGER Null, - - hora de entrada del dia
    '   minuentrada INTEGER Null, - - minuto de entrada en dicha hora
    '   horadescanso INTEGER Null, - - hora de descanso del dia
    '   minudescanso INTEGER Null, - - minuto de descanso en dicha respectiva hora
    '   horareincor INTEGER Null, - - hora que se reincorpora del descanso
    '   minureincor INTEGER Null, - - minuto de reincorporacion de dicha hora
    '   horasalida INTEGER Null, - - hora de salida del dia laborado
    '   minusalida INTEGER Null, - - minuto de salida de dich hora
    '   hex_huelladactilar BLOB Not Null, - - opcional, huella dactilar del usuario/trabajado ficha, opcional, es HEXFING
    '   hex_fotocara BLOB Not Null, - - opcional, foto de la cara es OPCIONAL y no necesario
    '   fec_actualizacion Date Null, - - fecha en que se altero los datos de esta tabla por ultima vez NOTA FUNCIONA CON DEFAULT NOW
    '   cod_usuasys VARCHAR(20)Null, - - codigo / usuario que altero los datos por ultima vez
    '   PRIMARY KEY(cod_ficha, fec_registro, cod_ubicacion),
    '   - - si el personal es muy movido, tendra registros en distintas ubicaciones,
    '   - - el ubicacion ayuda a descartar duplicados.esto amerita tener un SP que maneje los datos
    '   - - la expotacio se realizara en un vista que colocara el calculo de las horas y
    '   - - estos registros "dispersos"(ejemplo, entro en castellana, su primera salida debe ser de castellana antes de ir a otro lado)
    '   - - diferencia entre registro no puede ser menor a 1 / 3 hora y mayor a 6 horas CUANDO SEAN SELLOS DISTINTOS

    ' Poruqe dos columnas de fecha? : porque la segunda es por defecto la fecha y hora actual, si alguien manipula, se registra
    ' lo que significa que si alguien inserta alguna hora de trabajo a mano, se vera la trampa si no ejecuta completo el query

    Dim hTable As Table

    If isConected() == False Then
        getConeccionDB()
    Endif
    
    If Not hconn.Tables.Exist("sysasis_registro") Then
        hTable = hconn.Tables.Add("sysasis_registro")
        With hTable.Fields
            .Add("cod_ficha", db.String, 20)   ' ficha / cedula / id del trabajador NOTA ESTE NO ES CI, en VNZ es CI
            .Add("fec_registro", db.Date,, Null)   ' fecha del registro de dia de su huella dactilar
            .Add("cod_ubicacion", db.String, 20)   ' ubicacion(tienda)de su ultima actividad es CODSUC/CODGER
            .Add("num_contador", db.Integer,, 0)      ' contador de fotos, si va a distintos lugares debe marcar salida = 4
            .Add("horaentrada", db.Integer,, 0)      '
            .Add("minuentrada", db.Integer,, 0)      '
            .Add("horadescanso", db.Integer,, 0)      '
            .Add("minudescanso", db.Integer,, 0)      '
            .Add("minureincor", db.Integer,, 0)      '
            .Add("horasalida", db.Integer,, 0)      '
            .Add("minusalida", db.Integer,, 0)      '
            .Add("hex_huelladactilar", db.Blob,, Null)  ' opcional, huella dactilar del usuario/trabajado ficha, opcional, es HEXFING
            .Add("hex_fotocara", db.Blob,, Null)  ' foto de la cara del usuario/trabajado ficha, OPCIONAL
            .Add("fec_actualizacion", db.Date,, Now)   ' fecha del registro de dia de su huella dactilar
            .Add("cod_usuasys", db.String, 20)   ' ficha / cedula / id del trabajador NOTA ESTE NO ES CI, en VNZ es CI
        End With
        hTable.PrimaryKey = ["cod_ficha", "cod_ubicacion", "fec_registro"]
        hTable.Update
    Endif
    closeConnection

End



'' este proceso, inicia la tabla de lista de trabajadores/usuarios, y la pobla desde un archivo CSV o desde un regiastro por defecto
'' este proceso obtiene la lista de empleados/usuarios a autenticar, completa (fuerza bruta)
'' retrae el fichero compreso/encriptado, detecta nombres de campos e inserta los registros
'' una vez realizado esto borra el fichero desencriptado, los archivos son movidos por fecha
'' la fecha es el numero, no importando la de la maquina, la ultima fecha sera siempre el numero mayor
Public Sub syncronizar(arcm As Boolean, Optional nf As String = "consolidadotemp_export_", sincronizar As Boolean = True) As Integer

    Dim namFile As String       ' nombre del archivo CVS que trae la lista actualizada
    Dim namComp As New Uncompress   ' archivo comprimido
    Dim hFile As File           ' archivo CSV que se leera con los datos
    Dim wtable As Result        ' virtualizacion en tabal del archivo CSV antes de meter en la tabal de BD
    Dim wline As String         ' linea en procesamiento del CSV
    Dim wdata As String[]       ' linea procesada (columnas) del CSV
    Dim hTable As Table         ' tabla de la nomina listado desde esas lineas de procesamiento
    Dim numDate As Integer      ' numero formado por YYYYMMDD este se ira reduciendo hasta encontrar un archivo
    Dim extFile As String       ' extension del archivo dependiendo si esta compreso
    Dim sourcepath As String    ' ruta del archivo, por defecto home y /tmp si primera vez
    Dim sepa As String          ' separador de campos sea "," o ";"
    Dim hexfindata As Variant   ' data blob de hexfin despeus de reconvertir desde base64

    Dim tipnom As Integer, codsuc As Integer, codger As Integer, ficha As Integer
    Dim nombres As Integer, apellidos As Integer, estado As Integer, cedula As Integer, cedu As Integer
    Dim hexfing As Integer, fingreso As Integer

    Dim dummycont As Integer, icols As Integer, iline As Integer
    Dim dummyword As String     ' usado para ir analizando cada celada del archivo csv
    Dim dummyquer As String     ' usado para efectuar querys
    Dim fileexits As Boolean = False

    tipnom = 1          ' columna para lugar/entidad a la que compete dar respuesta
    codsuc = 2          ' columna de info de relacionada a la anterior, nunca viene vacio, por ello de segunda
    codger = 3          ' columna del departamento/ingerencia a que trabaja, nunca viene vacio por ello necesario
    ficha = 4           ' ficha, puede colarse una ficha con una "X" y sin un "cero" delante por mala conversion del CSV
    estado = 5          ' este es el principal filtro, solo los Activos estan en trabajo diario, el resto no deberia laborar
    cedula = 6          ' cedula, este campo trae letras, por ello no debe ser de los primeros, y puede estar duplicado
    cedu = 7            ' campo solo numeros, necesario ya que asi no completo con cero a izquierda
    fingreso = 8        ' este campo permite obtener el ultimo codigo codger fuera de los duplicados
    hexfing = 10        ' data variable grande de la huella dactilar, necesario
    nombres = 11        ' nombres ambos del trabajador, trae una coma por ende cuidado con el CSV, deberia estar de penultimo
    apellidos = 12      ' apellidos ambos del trabajador, trae una coma por ende cuidado con el CSV, deberia estar de ultimo
    
    ' preparacion de la coneccion de base de datos
    If isConected() == False Then
        getConeccionDB()
    Endif
    
    If arcm Then
        extFile = ".cryte"
    Else
        extFile = ".csv"
    Endif

    ' inicializacion de la lista matutina, esta lista solo se debe actualizar si hay archivo nuevo.
    numDate = Val(Format$(Now, "yyyymmdd"))
    sourcepath = User.Home
    namFile = sourcepath &/ nf & numDate & extFile
    Print "Obteniendo fuentes de datos de listado diario.... como " & namFile

    ' verificacion de si hay actualizacion de la lista de empleados, sino no procedo a usar alguno antiguo
    If Not Exist(namFile) Then
        fileexits = False
        While fileexits == False
            numDate = numDate - 1
            namFile = sourcepath &/ nf & numDate & extFile
            If Exist(namFile) Then
                Print "encontrado archivo viejo " & namFile
                fileexits = True
            Endif
            If numDate = 20121231 Then
                sourcepath = "/tmp"
                namFile = sourcepath &/ nf & numDate & extFile
                If itsDBexiste == False Then
                    If Not Exist(namFile) Then
                        Message.Error("No se encontro datos de sincronizacion al dia, consulte a sistemas. \n"
                        "\n\nNo se puede tomar asistencia, no hay un listado o el listado es muy viejo.\n\n"
                        "Debe existir un archivo similar a " & namFile & " como minimo.")
                        Return -1
                    Else
                        fileexits = True
                    Endif
                Endif
            Endif
        Wend
    Else
        fileexits = True ' si el archivo existe a la primera la lista esta al dia
    Endif
    
    ' por ahora el listado viene en formato bz2, la version privativa usara lrzip rpotegido con sha1
    If arcm Then
        extFile = ".cvs"
        namComp.Type = "bzlib2"
        Try namComp.File(namFile, sourcepath &/ nf & numDate & extFile)
        If Error Then
            Message.Error("No se pudo procesar los datos de sincronizacion al dia, consulte a sistemas. \n" 
              "\n\nNo se puede tomar asistencia, no hay un listado o el mismo esta dañado.\n\n"
              "Debe existir un archivo similar a " & namFile & " como minimo.")
              Return -1
        Endif
        namFile = sourcepath &/ nf & numDate & extFile
    Endif
    
    If fileexits Then
        'hay archivos nuevos, hay gente nueva, por ende se borra la tabla y se crea nueva
        hconn.Begin
            If hconn.Tables.Exist("ConsolidadoTemp") Then
                Print "verificando si la data ya existe en la db desde archivo ... "
                hFile = Open namFile For Read
                dummycont = 0
                While Not Eof(hFile)
                    Line Input #hFile, wline
                    If RInStr(wline, "FICHA") > 0 Or RInStr(wline, "ficha", 0, 1) > 0 Then
                        dummycont = 0       ' FICHA es uno de los posibles tutilos/cabecera, si viene no contarlo
                    Else
                        dummycont += 1      ' la misma cantidad de lineas de csv es la misma cantidad de registros
                    Endif
                Wend
                hFile.Close
                Try Kill namFile            ' ojo borramos rastro del la "desencriptado" y descomprimido
                If itsDBexiste() Then
                    dummyquer = "Select count( ficha ) as lineas From ConsolidadoTemp "
                    wtable = hconn.Exec(dummyquer)
                    If dummycont == wtable!lineas Then
                        Print "Datos encontrados, registros en db igual a archivo, sin necesidad de sincronizacion. " & wtable!lineas & " contra " & dummycont
                        Goto RellenarListado
                    Endif
                Endif
                Try hconn.Tables.Remove("ConsolidadoTemp")
                If Error Then
                Message.Error("No se pudo actualizar los datos de sincronizacion al dia, consulte a sistemas. \n" 
                  "\n\nNo se puede tomar asistencia, no hay un listado o el mismo esta dañado.\n\n"
                  "Debe de ser completada la lista, error " & Error.Text & Error.Code)
                  Return -1
                Endif
            Endif
            If Not hconn.Tables.Exist("ConsolidadoTemp") Then
                hTable = hconn.Tables.Add("ConsolidadoTemp")
                With hTable.Fields
                    .Add("TIPNOM", db.String, 60, "999") ' TIPONOM VARCHAR(60) Default Null, - - PK: nunca hay dos trabajadores en la misma nomina
                    .Add("CODSUC", db.String, 60, "999") ' CODSUC VARCHAR(60) Default Null, - - brinda info del lugar de trabajo
                    .Add("CODGER", db.String, 60, "999") ' CODGER VARCHAR(60) Default Null, - - brinda info del lugar donde debe trabajar
                    .Add("FICHA", db.String, 60, "99999999") ' FICHA VARCHAR(10)Null Default Null, - - identificador o licencia conducir, cedula sin letra de nacionalidad en caso Venezuela
                    .Add("NOMBRES", db.String, 60, Null) ' NOMBRES VARCHAR(60)Null Default Null, - - nombre, ambos separados por un espacio
                    .Add("APELLIDOS", db.String, 60, Null) ' APELLIDOS VARCHAR(60)Null Default Null, - - apellido, ambos separados por un espacio
                    .Add("ESTADO", db.String, 60, Null) ' ESTADO VARCHAR(60)Null Default Null, - - activo, inactivo, suspendido, vacaciones, usado para verificacion y auditoria
                    .Add("Cedula", db.String, 60, "99999999") ' Cedu VARCHAR(12)Null Default Null, - - numero de la cedula necesario sin ceros a la izquierda
                    .Add("HEXFING", db.Blob,, Null) ' HEXFING64 -- la huella dactilar, viene base64 codificado y debe convertirse antes de colocarse
                    .Add("fingreso", db.String, 60, Null) ' fingreso VARCHAR(60) Defaul Null - - fecha de ingreso a su respectivo codger, para saber su ultima ubicacion
                    .Add("fec_actualizacion", db.String, 60, Now) ' fec_actualizacion Date Not Null, - - fecha en que se altero los datos de esta tabla por ultima vez
                    .Add("cod_usuario", db.String, 60, "systemas") ' cod_usuario VARCHAR(20)Null Default 'systemas' , -- codigo/usuario que altero los datos por ultima vez
                End With
                hTable.PrimaryKey = ["TIPNOM", "CODSUC", "CODGER", "FICHA", "Cedula"] ' cedula no es pk, debe ser cedu
                hTable.Update
            Endif
        Try hconn.Commit
            If Error <> 0 Then
            Message.Error("No se pudo actualizar los datos de sincronizacion al dia, consulte a sistemas. \n" 
              "\n\nNo se puede tomar asistencia, no hay un listado o el mismo esta dañado.\n\n"
              "No se pudo generar la lista nueva en la DB, la DB puede que este dañada.")
              Return -1
            Endif
        Print "Procesando la data del archivo, encontrado que hay que actualizar... "
        ' procesamiento del archivo CSV, en un futuro este deberia solo enviar los cambiios
        hFile = Open namFile For Read
        ' primero leemos solo la primera linea, para determinar si hay nombres de columnas
        dummycont = 0
        Seek #hFile, dummycont
        Line Input #hFile, wline
        If InStr(wline, ",") > 1 Then
            sepa = ","
        Else
            sepa = ";"
        Endif
        wdata = Split(wline, sepa, "\\", False)
        ' recorro para ver si hay cabeceras, sino se usan las por defecto
        For icols = 0 To wdata.Max
            ' tomo la celda actual en icols, ademas celdalimpia analiza si la celda contiene comillas simples/dobles
            dummyword = celdalimpia(wdata[icols])
            ' empiezo comparar la linea primera por nombres de columnas, si no igual no hacer else, sino mete erroneo
            If Comp(dummyword, "TIPNOM", 1) = 0 Then
                tipnom = icols
            Endif
            If Comp(dummyword, "CODSUC", 1) = 0 Then
                codsuc = icols
            Endif
            If Comp(dummyword, "CODGER", 1) = 0 Then
                codger = icols
            Endif
            If Comp(dummyword, "FICHA", gb.IgnoreCase) == 0 Then
                ficha = icols
            Endif
            If Comp(dummyword, "NOMBRES", gb.IgnoreCase) = 0 Then
                nombres = icols
            Endif
            If Comp(dummyword, "APELLIDOS", gb.IgnoreCase) = 0 Then
                apellidos = icols
            Endif
            If Comp(dummyword, "ESTADO", gb.IgnoreCase) = 0 Then
                estado = icols
            Endif
            If Comp(dummyword, "Cedula", gb.IgnoreCase) = 0 Then    ' cedula con letra de pais y numero completado, solo Venezuela
                cedula = icols
            Endif
            If Comp(dummyword, "Cedu", gb.IgnoreCase) == 0 Then     ' cedula solo numeros sin cero a izquierda, necesario
                cedu = icols
            Endif
            If Comp(dummyword, "fingreso", gb.IgnoreCase) == 0 Then
                fingreso = icols
            Endif
            If Comp(dummyword, "HEXFING64", 1) == 0 Then
                hexfing = icols
            Endif
        Next
        dummycont = dummycont + 1
        ' leyendo la primera columna ya se hizo, ahora leemos el resto
        hconn.Begin
        While Not Eof(hFile)
            Line Input #hFile, wline
            ' todas las celdas deben tener datos, sino esto falla
            wdata = Split(wline, sepa, "\\", False)
            'hexceldalimpia(wdata[HEXFING64])
            'Print "procesando archivo linea " & dummycont & ": " & wdata[TIPNOM] & "," & wdata[CODSUC] & "," & wdata[CODGER] & "," & wdata[FICHA] & "," & wdata[Cedula] & "," & wdata[Cedu] & "," & wdata[NOMBRES]
            wtable = hconn.Create("ConsolidadoTemp")
            wtable["TIPNOM"] = celdalimpia(wdata[tipnom]) ' TIPNOM VARCHAR(60) Default Null, - - PK necesaria, dado no hay un trab en varias nominas
            wtable["CODSUC"] = celdalimpia(wdata[codsuc]) ' CODSUC VARCHAR(60) Default Null, - - brinda info del lugar de trabajo
            wtable["CODGER"] = celdalimpia(wdata[codger]) ' CODGER VARCHAR(60) Default Null, - - brinda info del lugar donde debe trabajar
            wtable["FICHA"] = celdalimpia(wdata[ficha]) ' FICHA VARCHAR(10)Null Default Null, - - identificador o licencia conducir, cedula sin letra de nacionalidad en caso Venezuela
            wtable["NOMBRES"] = celdalimpia(wdata[nombres]) ' NOMBRES VARCHAR(60)Null Default Null, - - nombre, ambos separados por un espacio
            wtable["APELLIDOS"] = celdalimpia(wdata[apellidos]) ' APELLIDOS VARCHAR(60)Null Default Null, - - apellido, ambos separados por un espacio
            wtable["ESTADO"] = celdalimpia(wdata[estado]) ' ESTADO VARCHAR(60)Null Default Null, - - activo, inactivo, suspendido, vacaciones, usado para verificacion y auditoria
            wtable["fingreso"] = celdalimpia(wdata[fingreso]) ' fingreso VARCHAR(60) Defaul Null - - fecha de ingreso a su respectivo codger, para saber su ultima ubicacion
            wtable["Cedula"] = celdalimpia(wdata[cedu]) ' Cedu VARCHAR(12)Null Default Null, - - numero unico del trabajador, en venezuela la cedula
            'wtable["HEXFING64"] =  ' HEXFING64 -- la huella dactilar, viene base64 codificado y debe convertirse antes de colocarse
            wtable.Update
            dummycont = dummycont + 1
        Wend
        Print "Procesados " & dummycont & " registros, listado completado, procediendo sincronizar datos existentes si alguno.."
        hFile.Close
        hconn.Commit
        FMain.datos.setDbLocalLista(True) ' comunico a main que ya no tiene que invocarme mas nunca
        Try Kill namFile
    Endif
    
    RellenarListado:
    
    sysasis_init_listado_id     ' inicio la tabla de listado filtrado
    sysasis_init_enrolar_id     ' inicio la tabla de enrolado nuevo
    sysasis_init_registro       ' inicio la tabla de registros del dia
    
    dummyquer = "INSERT" 
    dummyquer = dummyquer & " INTO sysasis_listado_id(cod_ficha, fec_registro, cod_ubicacion, hex_huelladactilar)" 
    dummyquer = dummyquer & " Select ficha, fec_actualizacion, codsuc, HEXFING From ConsolidadoTemp "
    dummyquer = dummyquer & "WHERE ConsolidadoTemp.ESTADO Like '_ctivo'"
    
    ' pasar la data con los dedos a la tabla de listado para no usar los datos basura si existiera alguno
    hconn.Begin
    hconn.Exec("DELETE FROM sysasis_listado_id ")
    hconn.Commit
    hconn.Begin
    hconn.Exec(dummyquer)
    hconn.Commit
    ' TODO si modo directo activado, no borar datos de tabla de enrolado, sino insertarlos en el listado
    'sys_enroll_user("999999999", True, Null, Null, Null, "Nombre", "Apellido")
    ' TODO OJO si desactivado modo directo listar y borrar dichos ingresados que aun esten en esta tabla
    closeConnection
    Print "Base de datos sincronizada y preparada, lista para usar."
    Return 0

End

'' celdalimpia remueve la comillas simples/dobles de una variable texto
Private Sub celdalimpia(celda As String, Optional delimitador As String = "\"") As String
    If Left$(celda) == "\'" And Right$(celda) == "\'" Then
        celda = Mid$(celda, 2, -1)
    Endif
    ' analizo si la celda contiene comillas dobles
    If Left$(celda) == delimitador And Right$(celda) == delimitador Then
        celda = Mid$(celda, 2, -1)
    Endif
    Return celda
End


'' procedimiento de reclutamiento de nuevos esclav.. errr nuevos trabjadores a la lista
'' requiere el id (ficha/cedula/identificador) del usuario o trabajador, 
'' opcionalmente se le pasa la data del dedo, en ultimo caso las fotos de la cara y el dedo que no son importantes si la primera esta
Public Sub sys_enroll_user(id As String, Optional direct_enroll As Boolean = False, data As Variant = Null, imag_cara As Picture = Null, imag_dedo As Picture = Null, nameid As String, apelid As String) As Integer
    
    Dim wtable As Result        ' virtualizacion en tabal del archivo CSV antes de meter en la tabal de BD
    Dim dummyquer As String     ' query para ingresar el usuario en la lista de enrolado
    Dim hres As Result          ' abstraccion de resultados desde DB despeus de ejecutar query
    Dim codubi As String        ' codigo de la ubicacion, deberia tomarse de la aplicacion pero bueh
    Dim vartempo As Integer     ' usada para saber en cada query si vino resultado alguno
    Dim coderro As Integer = 1  ' codigo error de la operacion, cero si nada falla, y 1 hay errores
    
    Dim fixcedula As String
    Dim numdigits As Integer
    Dim fixedcedu As String
    
    ' TODO , el id varia en digitos, por ahora usare completado a 8 digitos por orientarlo a la cedula Venezoelana
    fixcedula = id
    numdigits = Len(fixcedula)
    If numdigits < 8 Then
        fixedcedu = "0" & fixcedula
    Else
        fixedcedu = fixcedula
    Endif
    id = fixedcedu
    
    ' preparacion de la coneccion de base de datos
    If isConected() == False Then
        getConeccionDB()
    Endif
    
    

    ' se esta registrando la huella de un nuevo usuario, verificamos no lo hayan enrolado antes
    dummyquer = "SELECT count(cod_ficha) as existe FROM sysasis_enrolar_id WHERE cod_ficha LIKE '" & id & "'"
    Try hres = hconn.Exec(dummyquer)
    If Error Then
        coderro = 2
    Else
        vartempo = hres!existe
        Print "Encontrados " & vartempo & " usuarios similares.. procediendo a manejarlo.."
        If vartempo >= 1 Then
            hconn.Begin
            dummyquer = "DELETE FROM sysasis_enrolar_id WHERE cod_ficha LIKE '" & id & "%'"
            hres = hconn.Exec(dummyquer)
            Try hconn.Commit
            If Error Then
                coderro = 2
            Endif
        Endif
    Endif

    If coderro == 2 Then
        Print " Error registrando el id: " & Error.Text & " " & Error.Code & " consulte con el departamento de nomina, y en ultimo sistemas."
        Message.Warning(" Error registrando el id: " & Error.Text & " " & Error.Code & "\nPor favor vuelva a intentarlo, si persiste dicho error entonces\nconsulte con el departamento de nomina, a traves de la mensageria.")
        Return coderro
    Endif
    
    codubi = "998"
    ' intentamos ver si podemos tomar el codigo ubicacion de la nomina (si el usuario ha estado antes o se retoma su huella)
    dummyquer = "SELECT CODGER, fingreso, MAX(date(fingreso)) as num FROM ConsolidadoTemp WHERE ficha LIKE '" & id & "'"
    Try hres = hconn.Exec(dummyquer)
    If Error Then
        Print " Error verificando ubicacion del id: " & Error.Text & " " & Error.Code & " usando uno por defecto 998 "
        Return coderro
    Endif
    ' vartempo = hres.count 'ojo: un select bien ejecutado no da eeror, y del select anterior ya vino codger
    If vartempo >= 1 Then
        codubi = hres!CODGER ' por ende si la ficha existia, vartempo ya era 1 y traera codger
        If Comp(Trim(codubi), "", 1) == 0 Then
            codubi = "998"
        Endif
    Endif
    ' se enrola el usuario con el dedo, laimagen es opcional
    hconn.Begin
    wtable = hconn.Create("sysasis_enrolar_id")
    wtable!cod_ficha = id ' TIPNOM VARCHAR(60) Default Null, - - PK necesaria, dado no hay un trab en varias nominas"
    wtable!fec_registro = Date(Now) ' CODSUC VARCHAR(60) Default Null, - - brinda info del lugar de trabajo"
    wtable!cod_ubicacion = codubi ' CODGER VARCHAR(60) Default Null, - - brinda info del lugar donde debe trabajar"
    wtable!hex_huelladactilar = data ' HEXFING64 -- la huella dactilar, viene base64 codificado y debe convertirse antes de colocarse"
    wtable!hex_fotocara = imag_cara ' la foto por si no sirve el escanerdedo y hay que auditar la asistencia"
    wtable!fec_actualizacion = Date(Now)
    wtable!cod_usuasys = "systemas"
    wtable.Update
    Try hconn.Commit
    If Error Then
        Print " Error registrando el id: " & Error.Text & " error " & Error.Code & ""
        Message.Warning(" Error registrando el id: " & Error.Text & " " & Error.Code & "\nPor favor vuelva a intentarlo, si persiste dicho error entonces\nconsulte con el departamento de nomina, a traves de la mensageria.")
        coderro = 1
    Else
        coderro = 0
    Endif
    ' ahora, si la aplicacion es al mismo tiempo en un solo lugar, verificar el modo directo (sin requisito de aprovacion)
    Print "Verificando si enrolado/verificado directo esta activado... " & direct_enroll
    If direct_enroll == True Then
        dummyquer = "SELECT count(cod_ficha) as existe FROM sysasis_listado_id WHERE cod_ficha LIKE '" & id & "'"
        Try wtable = hconn.Exec(dummyquer)
        If Error <> 0 Then
            coderro = 2
        Else
            vartempo = wtable!existe   ' en el delete no hacemos try, ya que en el select aseguramos cod_ficha existe dicho campo
            If vartempo >= 1 Then
                Print "Enrolado directo activado, detectado que el usuario " & id & " existe, se actualizara su huella con esta nueva"
            Endif
            hconn.Begin
            wtable = hconn.Create("sysasis_listado_id")
            wtable!cod_ficha = id ' TIPNOM VARCHAR(60) Default Null, - - PK necesaria, dado no hay un trab en varias nominas"
            wtable!fec_registro = Date(Now) ' CODSUC VARCHAR(60) Default Null, - - brinda info del lugar de trabajo"
            wtable!cod_ubicacion = codubi ' CODGER VARCHAR(60) Default Null, - - brinda info del lugar donde debe trabajar"
            wtable!hex_huelladactilar = data ' HEXFING64 -- la huella dactilar, viene base64 codificado y debe convertirse antes de colocarse"
            wtable!hex_fotocara = imag_cara ' la foto por si no sirve el escanerdedo y hay que auditar la asistencia"
            wtable!fec_actualizacion = Date(Now)
            wtable!cod_usuasys = "systemas"
            wtable.Update
            Try hconn.Commit
            If Error Then
                Print " Error registrando el id: " & Error.Text & " error " & Error.Code & ""
                Message.Warning(" Error registrando el id: " & Error.Text & " " & Error.Code & "\nPor favor vuelva a intentarlo, si persiste dicho error entonces\nconsulte con el departamento de nomina, a traves de la mensageria.")
                coderro = 1
            Else
                coderro = 0
                Print "Enrolado directo activado, Datos actualizados, para el usuario " & id & " ya puede usar su huella dactilar"
            Endif
        Endif
    Endif
    Print "Usuario/trabajador enrolado, datos seran validos para verificacion apenas se aprueben en listado nuevo. " & coderro
    closeConnection
    Return coderro
    
End

'' procedimiento de verificacion de esclav.. digo de huella dactilar de usuarios/trabajadores existentes
'' requiere el id (ficha/cedula/identificador) del usuario o trabajador, 
'' retorna la data de la huella unicamente, ya que la verificacion se realiza por logica al vuelo
Public Sub sys_verify_user(id As String, Optional requested As String = "0") As String
    
    Dim wtable As Result        ' virtualizacion en tabal del archivo CSV antes de meter en la tabal de BD
    Dim dummyquer As String     ' query para ingresar el usuario en la lista de enrolado
    Dim hres As Result          ' abstraccion de resultados desde DB despeus de ejecutar query
    Dim codubi As String        ' codigo de la ubicacion, deberia tomarse de la aplicacion pero bueh
    Dim vartempo As Integer     ' usada para saber en cada query si vino resultado alguno
    Dim coderro As Integer = 0  ' codigo error de la operacion, cero si nada fallido, y 1 hay errores
    Dim data As String = Null  ' data del dedo a retornar del usuario, se coloca en fs para engañar a la lib
    
    ' preparacion de la coneccion de base de datos
    If isConected() == False Then
        getConeccionDB()
    Endif

    ' se esta registrando la huella de un nuevo usuario, verificamos no lo hayan enrolado antes
    dummyquer = "SELECT cod_ficha, cod_ubicacion, hex_huelladactilar FROM sysasis_listado_id WHERE cod_ficha LIKE '" & id & "%'"
    Try wtable = hconn.Exec(dummyquer)
    If Error Then
        coderro = 2
    Else
        vartempo = wtable.Count   ' en el delete no hacemos try, ya que en el select aseguramos cod_ficha existe dicho campo
        If vartempo >= 1 Then
            data = Base64(wtable["hex_huelladactilar"].Data)
        Endif
    Endif
    
    If coderro == 2 Then
        Print " Error verificando el id: " & Error.Text & " " & Error.Code & " consulte con el departamento de nomina, y en ultimo sistemas."
        Message.Warning(" Error verificando el id: " & Error.Text & " " & Error.Code & "\nPor favor vuelva a intentarlo, si persiste dicho error entonces\nconsulte con el departamento de nomina, a traves de la mensageria.")
        Return False
    Else
        
    Endif
    
    ' TODO si modo directo activo ya podria verificarse, pero sino entonces logear que necesita aprobacion
    Print "Usuario/trabajador encontrado.. para validar... " & coderro
    closeConnection
    Return data
    
End


                    
'' empleada para verificar el correcto seguimiento de inicio de la gestin de datos, con true, cada proceso extra no fallaria
'' verificador de coneccion activa, getconnection establece True y crea una nueva si es necesario
Public Sub isConected() As Boolean
    Return hconniscon ' getconection establece esto a true si hay una coneccion activa
End
